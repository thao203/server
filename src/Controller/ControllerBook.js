const ModelBook = require('../Model/ModelBook');
const ModelBookGenre = require('../Model/ModelBookGenre');
const ModelHandleBook = require('../Model/ModelHandleBook');
const LocationCategory = require('../Model/ModelLocationCategory');
const mongoose = require('mongoose');
const axios = require('axios');

class ControllerBook {
    // Th√™m s√°ch m·ªõi
    async AddBook(req, res) {
        try {
            const { masach, img, tensach, tacgia, nhaxuatban, phienban, madanhmuc, namxb, mota, vitri, pages, price } = req.body;

            // Ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
            if (!masach || !tensach || !tacgia || !nhaxuatban || !phienban || !madanhmuc || !namxb || !mota ||
                !Array.isArray(vitri) || vitri.length === 0 || pages < 0 || price < 0) {
                return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß v√† h·ª£p l·ªá th√¥ng tin s√°ch !!!' });
            }

            // Ki·ªÉm tra m√£ s√°ch ƒë√£ t·ªìn t·∫°i ch∆∞a
            const existingBook = await ModelBook.findOne({ masach });
            if (existingBook) {
                return res.status(400).json({ message: 'M√£ s√°ch ƒë√£ t·ªìn t·∫°i !!!' });
            }

            // Ki·ªÉm tra m√£ danh m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
            const categoryExists = await ModelBookGenre.findOne({ madanhmuc });
            if (!categoryExists) {
                return res.status(400).json({ message: 'M√£ danh m·ª•c kh√¥ng t·ªìn t·∫°i !!!' });
            }

            // Ki·ªÉm tra m√£ v·ªã tr√≠ c√≥ t·ªìn t·∫°i kh√¥ng
            const locationIds = vitri.map(item => item.mavitri);
            const existingLocations = await LocationCategory.find({ mavitri: { $in: locationIds } });

            if (existingLocations.length !== locationIds.length) {
                return res.status(400).json({ message: 'M·ªôt ho·∫∑c nhi·ªÅu m√£ v·ªã tr√≠ kh√¥ng t·ªìn t·∫°i !!!' });
            }

            // Chu·∫©n h√≥a danh s√°ch v·ªã tr√≠
            const formattedVitri = vitri.map(item => ({
                mavitri: item.mavitri,
                soluong: item.soluong >= 0 ? item.soluong : 0,
                soluongmuon: 0
            }));

            // T·∫°o m·ªõi s√°ch
            const book = new ModelBook({
                masach, img, tensach, tacgia, nhaxuatban, phienban, madanhmuc, namxb, mota,
                vitri: formattedVitri, pages, price
            });

            await book.save();
            return res.status(201).json({ message: 'Th√™m s√°ch th√†nh c√¥ng !!!', book });

        } catch (error) {
            console.error("L·ªói khi th√™m s√°ch:", error);
            return res.status(500).json({ message: 'ƒê√£ x·∫£y ra l·ªói, vui l√≤ng th·ª≠ l·∫°i !!!' });
        }
    }

    async GetBooks(req, res) {
        try {
            // üîπ L·∫•y danh s√°ch s√°ch
            const dataBooks = await ModelBook.find({});

            // üîπ L·∫•y danh s√°ch danh m·ª•c s√°ch
            const bookGenres = await ModelBookGenre.find({});
            const genreMap = bookGenres.reduce((map, genre) => {
                map[genre.madanhmuc] = genre.tendanhmuc;
                return map;
            }, {});

            // üîπ L·∫•y danh s√°ch v·ªã tr√≠
            const locationCategories = await LocationCategory.find({});
            const locationMap = locationCategories.reduce((map, loc) => {
                map[loc.mavitri] = loc.coso;
                return map;
            }, {});

            // üîπ Format l·∫°i d·ªØ li·ªáu s√°ch
            const formattedBooks = dataBooks.map(book => {
                // T√≠nh s·ªë l∆∞·ª£ng c√≤n l·∫°i theo t·ª´ng v·ªã tr√≠
                const vitriFormatted = book.vitri.map(v => ({
                    mavitri: v.mavitri,
                    coso: locationMap[v.mavitri] || "Kh√¥ng x√°c ƒë·ªãnh", // Th√™m t√™n c∆° s·ªü
                    soluong: v.soluong,
                    soluongmuon: v.soluongmuon,
                    soluong_con: v.soluong - v.soluongmuon // S·ªë l∆∞·ª£ng c√≤n l·∫°i t·∫°i v·ªã tr√≠
                }));

                // T√≠nh t·ªïng s·ªë l∆∞·ª£ng c·ªßa s√°ch
                const tongsoluong = vitriFormatted.reduce((sum, v) => sum + v.soluong, 0);

                return {
                    masach: book.masach,
                    tensach: book.tensach,
                    tacgia: book.tacgia,
                    nhaxuatban: book.nhaxuatban,
                    phienban: book.phienban,
                    madanhmuc: book.madanhmuc,
                    tendanhmuc: genreMap[book.madanhmuc] || "Kh√¥ng x√°c ƒë·ªãnh", // Th√™m t√™n danh m·ª•c
                    namxb: book.namxb,
                    mota: book.mota,
                    pages: book.pages,
                    price: book.price,
                    img: book.img,
                    ngaycapnhat: book.ngaycapnhat,
                    vitri: vitriFormatted,
                    Tongsoluong: tongsoluong // T·ªïng s·ªë l∆∞·ª£ng s√°ch
                };
            });

            res.status(200).json(formattedBooks);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch s√°ch:", error);
            res.status(500).json({ message: 'L·ªói m√°y ch·ªß !!!' });
        }
    }

    // C·∫≠p nh·∫≠t s√°ch
    async UpdateBook(req, res) {
        try {
            const { masach, tensach, tacgia, nhaxuatban, phienban, madanhmuc, namxb, mota, vitri, pages, price, img } = req.body;

            if (!masach) {
                return res.status(400).json({ message: 'Thi·∫øu m√£ s√°ch !!!' });
            }

            const book = await ModelBook.findOne({ masach });
            if (!book) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s√°ch !!!' });
            }

            if (pages < 0 || price < 0) {
                return res.status(400).json({ message: 'S·ªë trang v√† gi√° kh√¥ng ƒë∆∞·ª£c √¢m !!!' });
            }

            let updatedVitri = book.vitri;
            if (Array.isArray(vitri)) {
                updatedVitri = vitri.map(item => {
                    const existingLocation = book.vitri.find(v => v.mavitri === item.mavitri);
                    const newSoluong = item.soluong >= 0 ? item.soluong : 0;
                    const currentSoluongmuon = existingLocation ? existingLocation.soluongmuon : 0;

                    // Ki·ªÉm tra r√†ng bu·ªôc: soluong m·ªõi kh√¥ng ƒë∆∞·ª£c nh·ªè h∆°n soluongmuon
                    if (newSoluong < currentSoluongmuon) {
                        throw new Error(`S·ªë l∆∞·ª£ng t·∫°i v·ªã tr√≠ ${item.mavitri} kh√¥ng h·ª£p l·ªá: s·ªë l∆∞·ª£ng m·ªõi (${newSoluong}) nh·ªè h∆°n s·ªë l∆∞·ª£ng ƒëang m∆∞·ª£n (${currentSoluongmuon})!`);
                    }

                    return {
                        mavitri: item.mavitri,
                        soluong: newSoluong,
                        soluongmuon: currentSoluongmuon
                    };
                });
            }

            const updatedBook = await ModelBook.findOneAndUpdate(
                { masach },
                {
                    tensach: tensach || book.tensach,
                    tacgia: tacgia || book.tacgia,
                    nhaxuatban: nhaxuatban || book.nhaxuatban,
                    phienban: phienban || book.phienban,
                    madanhmuc: madanhmuc || book.madanhmCarruc,
                    namxb: namxb || book.namxb,
                    mota: mota || book.mota,
                    vitri: updatedVitri,
                    pages: pages !== undefined ? pages : book.pages,
                    price: price !== undefined ? price : book.price,
                    img: img || book.img,
                    ngaycapnhat: Date.now()
                },
                { new: true }
            );

            return res.status(200).json({ message: 'C·∫≠p nh·∫≠t s√°ch th√†nh c√¥ng !!!', book: updatedBook });

        } catch (error) {
            console.error(error);
            return res.status(500).json({ message: error.message || 'L·ªói m√°y ch·ªß !!!' });
        }
    }

    async DeleteBook(req, res) {
        try {
            const { masach } = req.body;

            if (!masach) {
                return res.status(400).json({ message: 'Thi·∫øu m√£ s√°ch' });
            }

            // Ki·ªÉm tra xem s√°ch c√≥ t·ªìn t·∫°i kh√¥ng
            const book = await ModelBook.findOne({ masach });
            if (!book) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s√°ch' });
            }

            // Ki·ªÉm tra xem s√°ch c√≥ phi·∫øu m∆∞·ª£n n√†o kh√¥ng
            const borrowRecords = await ModelHandleBook.find({ 'books.masach': masach });

            // N·∫øu c√≥ phi·∫øu m∆∞·ª£n, ki·ªÉm tra t·∫•t c·∫£ 'tinhtrang'
            const hasUnreturnedBooks = borrowRecords.some(record =>
                record.books.some(book => book.masach === masach && !book.tinhtrang)
            );

            if (hasUnreturnedBooks) {
                return res.status(400).json({ message: 'Kh√¥ng th·ªÉ x√≥a, s√°ch v·∫´n ƒëang ƒë∆∞·ª£c m∆∞·ª£n !!!' });
            }

            // X√≥a s√°ch v√¨ t·∫•t c·∫£ phi·∫øu m∆∞·ª£n ƒë√£ tr·∫£
            const result = await ModelBook.deleteOne({ masach });

            if (result.deletedCount === 0) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ x√≥a' });
            }

            res.status(200).json({ message: 'X√≥a s√°ch th√†nh c√¥ng', result });

        } catch (error) {
            console.error(error);
            res.status(500).json({ message: 'L·ªói khi x√≥a s√°ch', error });
        }
    }

    // T√¨m ki·∫øm s√°ch theo t√™n
    async SearchProduct(req, res) {
        try {
            let keyword = req.query.tensach?.trim();

            if (!keyword) {
                return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!' });
            }

            // Chu·∫©n h√≥a t·ª´ kh√≥a t√¨m ki·∫øm
            const normalizeText = (text) => {
                return text
                    .normalize("NFD") // T√°ch d·∫•u kh·ªèi k√Ω t·ª±
                    .replace(/[\u0300-\u036f]/g, "") // X√≥a d·∫•u
                    .toLowerCase(); // Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
            };

            const normalizedKeyword = normalizeText(keyword);

            // T√¨m ki·∫øm v√† chu·∫©n h√≥a d·ªØ li·ªáu trong DB
            const dataProducts = await ModelBook.find();
            const filteredBooks = dataProducts.filter(book =>
                normalizeText(book.tensach).includes(normalizedKeyword)
            );

            if (filteredBooks.length === 0) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s√°ch !!!' });
            }

            const formattedBooks = filteredBooks.map(book => ({
                ...book.toObject(),
                mavitri: book.vitri.map(v => v.mavitri).join(', '),
                currentQuantity: book.vitri.reduce((sum, v) => sum + (v.soluong - v.soluongmuon), 0)
            }));

            return res.status(200).json(formattedBooks);
        } catch (error) {
            console.error('L·ªói t√¨m ki·∫øm s√°ch:', error);
            return res.status(500).json({ message: 'L·ªói m√°y ch·ªß!' });
        }
    }

    async SearchBookByMaSach(req, res) {
        try {
            const { masach } = req.query;

            if (!masach) {
                return res.status(400).json({ message: 'Vui l√≤ng nh·∫≠p m√£ s√°ch !!!' });
            }

            // üîπ T√¨m s√°ch theo m√£ s√°ch
            const book = await ModelBook.findOne({ masach });

            if (!book) {
                return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y s√°ch !!!' });
            }

            // üîπ L·∫•y danh s√°ch danh m·ª•c
            const bookGenres = await ModelBookGenre.find({});
            const genreMap = bookGenres.reduce((map, genre) => {
                map[genre.madanhmuc] = genre.tendanhmuc;
                return map;
            }, {});

            // üîπ L·∫•y danh s√°ch v·ªã tr√≠
            const locationCategories = await LocationCategory.find({});
            const locationMap = locationCategories.reduce((map, loc) => {
                map[loc.mavitri] = loc.coso;
                return map;
            }, {});

            // üîπ Format l·∫°i d·ªØ li·ªáu v·ªã tr√≠
            const vitriFormatted = book.vitri.map(v => ({
                mavitri: v.mavitri,
                coso: locationMap[v.mavitri] || "Kh√¥ng x√°c ƒë·ªãnh", // Th√™m t√™n c∆° s·ªü
                soluong: v.soluong,
                soluongmuon: v.soluongmuon,
                soluong_con: v.soluong - v.soluongmuon // S·ªë l∆∞·ª£ng c√≤n l·∫°i t·∫°i v·ªã tr√≠
            }));

            // üîπ T√≠nh t·ªïng s·ªë l∆∞·ª£ng s√°ch
            const tongsoluong = vitriFormatted.reduce((sum, v) => sum + v.soluong, 0);

            // üîπ Chu·∫©n b·ªã d·ªØ li·ªáu tr·∫£ v·ªÅ
            const formattedBook = {
                masach: book.masach,
                tensach: book.tensach,
                tacgia: book.tacgia,
                nhaxuatban: book.nhaxuatban,
                phienban: book.phienban,
                madanhmuc: book.madanhmuc,
                tendanhmuc: genreMap[book.madanhmuc] || "Kh√¥ng x√°c ƒë·ªãnh", // Th√™m t√™n danh m·ª•c
                namxb: book.namxb,
                mota: book.mota,
                pages: book.pages,
                price: book.price,
                img: book.img,
                ngaycapnhat: book.ngaycapnhat,
                vitri: vitriFormatted,
                Tongsoluong: tongsoluong // T·ªïng s·ªë l∆∞·ª£ng s√°ch
            };

            return res.status(200).json(formattedBook);
        } catch (error) {
            console.error("L·ªói khi t√¨m s√°ch theo m√£ s√°ch:", error);
            return res.status(500).json({ message: 'L·ªói m√°y ch·ªß !!!' });
        }
    }

    async GetLatestUpdatedBooks(req, res) {
        try {
            // L·∫•y 20 s√°ch c√≥ ng√†y c·∫≠p nh·∫≠t g·∫ßn nh·∫•t
            const books = await ModelBook.find({})
                .sort({ ngaycapnhat: -1 }) // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo ng√†y c·∫≠p nh·∫≠t
                .limit(10);

            return res.status(200).json(books);
        } catch (error) {
            console.error(" L·ªói khi l·∫•y danh s√°ch s√°ch c·∫≠p nh·∫≠t g·∫ßn nh·∫•t:", error);
            return res.status(500).json({ message: 'L·ªói m√°y ch·ªß !!!' });
        }
    }

    async GetMostBorrowedBooks(req, res) {
        try {
            // L·∫•y s√°ch c√≥ l∆∞·ª£t m∆∞·ª£n nhi·ªÅu nh·∫•t tr∆∞·ªõc
            const books = await ModelBook.find({})
                .sort({ soluongmuon: -1 }) // S·∫Øp x·∫øp gi·∫£m d·∫ßn theo s·ªë l∆∞·ª£t m∆∞·ª£n
                .limit(20); // Gi·ªõi h·∫°n 20 s√°ch n·∫øu c·∫ßn

            return res.status(200).json(books);
        } catch (error) {
            console.error("L·ªói khi l·∫•y danh s√°ch s√°ch m∆∞·ª£n nhi·ªÅu nh·∫•t:", error);
            return res.status(500).json({ message: 'L·ªói m√°y ch·ªß !!!' });
        }
    }
}

module.exports = new ControllerBook();